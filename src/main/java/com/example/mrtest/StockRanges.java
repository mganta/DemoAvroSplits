/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.example.mrtest;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class StockRanges extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"StockRanges\",\"namespace\":\"com.example.mrtest\",\"fields\":[{\"name\":\"Symbol\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"Low\",\"type\":[\"null\",\"double\"]},{\"name\":\"High\",\"type\":[\"null\",\"double\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   private java.lang.String Symbol;
   private java.lang.Double Low;
   private java.lang.Double High;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}. 
   */
  public StockRanges() {}

  /**
   * All-args constructor.
   */
  public StockRanges(java.lang.String Symbol, java.lang.Double Low, java.lang.Double High) {
    this.Symbol = Symbol;
    this.Low = Low;
    this.High = High;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return Symbol;
    case 1: return Low;
    case 2: return High;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: Symbol = (java.lang.String)value$; break;
    case 1: Low = (java.lang.Double)value$; break;
    case 2: High = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'Symbol' field.
   */
  public java.lang.String getSymbol() {
    return Symbol;
  }

  /**
   * Sets the value of the 'Symbol' field.
   * @param value the value to set.
   */
  public void setSymbol(java.lang.String value) {
    this.Symbol = value;
  }

  /**
   * Gets the value of the 'Low' field.
   */
  public java.lang.Double getLow() {
    return Low;
  }

  /**
   * Sets the value of the 'Low' field.
   * @param value the value to set.
   */
  public void setLow(java.lang.Double value) {
    this.Low = value;
  }

  /**
   * Gets the value of the 'High' field.
   */
  public java.lang.Double getHigh() {
    return High;
  }

  /**
   * Sets the value of the 'High' field.
   * @param value the value to set.
   */
  public void setHigh(java.lang.Double value) {
    this.High = value;
  }

  /** Creates a new StockRanges RecordBuilder */
  public static com.example.mrtest.StockRanges.Builder newBuilder() {
    return new com.example.mrtest.StockRanges.Builder();
  }
  
  /** Creates a new StockRanges RecordBuilder by copying an existing Builder */
  public static com.example.mrtest.StockRanges.Builder newBuilder(com.example.mrtest.StockRanges.Builder other) {
    return new com.example.mrtest.StockRanges.Builder(other);
  }
  
  /** Creates a new StockRanges RecordBuilder by copying an existing StockRanges instance */
  public static com.example.mrtest.StockRanges.Builder newBuilder(com.example.mrtest.StockRanges other) {
    return new com.example.mrtest.StockRanges.Builder(other);
  }
  
  /**
   * RecordBuilder for StockRanges instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<StockRanges>
    implements org.apache.avro.data.RecordBuilder<StockRanges> {

    private java.lang.String Symbol;
    private java.lang.Double Low;
    private java.lang.Double High;

    /** Creates a new Builder */
    private Builder() {
      super(com.example.mrtest.StockRanges.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.example.mrtest.StockRanges.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.Symbol)) {
        this.Symbol = data().deepCopy(fields()[0].schema(), other.Symbol);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Low)) {
        this.Low = data().deepCopy(fields()[1].schema(), other.Low);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.High)) {
        this.High = data().deepCopy(fields()[2].schema(), other.High);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing StockRanges instance */
    private Builder(com.example.mrtest.StockRanges other) {
            super(com.example.mrtest.StockRanges.SCHEMA$);
      if (isValidValue(fields()[0], other.Symbol)) {
        this.Symbol = data().deepCopy(fields()[0].schema(), other.Symbol);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Low)) {
        this.Low = data().deepCopy(fields()[1].schema(), other.Low);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.High)) {
        this.High = data().deepCopy(fields()[2].schema(), other.High);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'Symbol' field */
    public java.lang.String getSymbol() {
      return Symbol;
    }
    
    /** Sets the value of the 'Symbol' field */
    public com.example.mrtest.StockRanges.Builder setSymbol(java.lang.String value) {
      validate(fields()[0], value);
      this.Symbol = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'Symbol' field has been set */
    public boolean hasSymbol() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'Symbol' field */
    public com.example.mrtest.StockRanges.Builder clearSymbol() {
      Symbol = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'Low' field */
    public java.lang.Double getLow() {
      return Low;
    }
    
    /** Sets the value of the 'Low' field */
    public com.example.mrtest.StockRanges.Builder setLow(java.lang.Double value) {
      validate(fields()[1], value);
      this.Low = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'Low' field has been set */
    public boolean hasLow() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'Low' field */
    public com.example.mrtest.StockRanges.Builder clearLow() {
      Low = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'High' field */
    public java.lang.Double getHigh() {
      return High;
    }
    
    /** Sets the value of the 'High' field */
    public com.example.mrtest.StockRanges.Builder setHigh(java.lang.Double value) {
      validate(fields()[2], value);
      this.High = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'High' field has been set */
    public boolean hasHigh() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'High' field */
    public com.example.mrtest.StockRanges.Builder clearHigh() {
      High = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public StockRanges build() {
      try {
        StockRanges record = new StockRanges();
        record.Symbol = fieldSetFlags()[0] ? this.Symbol : (java.lang.String) defaultValue(fields()[0]);
        record.Low = fieldSetFlags()[1] ? this.Low : (java.lang.Double) defaultValue(fields()[1]);
        record.High = fieldSetFlags()[2] ? this.High : (java.lang.Double) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
